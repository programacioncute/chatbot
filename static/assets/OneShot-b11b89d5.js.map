{"version":3,"file":"OneShot-b11b89d5.js","sources":["../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/pages/oneshot/OneShot.tsx"],"sourcesContent":["import styles from \"./Example.module.css\";\n\ninterface Props {\n    text: string;\n    value: string;\n    onClick: (value: string) => void;\n}\n\nexport const Example = ({ text, value, onClick }: Props) => {\n    return (\n        <div className={styles.example} onClick={() => onClick(value)}>\n            <p className={styles.exampleText}>{text}</p>\n        </div>\n    );\n};\n","import { Example } from \"./Example\";\n\nimport styles from \"./Example.module.css\";\n\nexport type ExampleModel = {\n    text: string;\n    value: string;\n};\n\nconst EXAMPLES: ExampleModel[] = [\n    {\n        text: \"What is included in my Northwind Health Plus plan that is not in standard?\",\n        value: \"What is included in my Northwind Health Plus plan that is not in standard?\"\n    },\n    {\n        text: \"What happens in a performance review?\",\n        value: \"What happens in a performance review?\"\n    },\n    {\n        text: \"What does a Product Manager do?\",\n        value: \"What does a Product Manager do?\"\n    }\n];\n\ninterface Props {\n    onExampleClicked: (value: string) => void;\n}\n\nexport const ExampleList = ({ onExampleClicked }: Props) => {\n    return (\n        <ul className={styles.examplesNavList}>\n            {EXAMPLES.map((x, i) => (\n                <li key={i}>\n                    <Example text={x.text} value={x.value} onClick={onExampleClicked} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import { useRef, useState } from \"react\";\nimport { Checkbox, ChoiceGroup, IChoiceGroupOption, Panel, DefaultButton, Spinner, TextField, SpinButton } from \"@fluentui/react\";\n\nimport styles from \"./OneShot.module.css\";\n\nimport { askApi, Approaches, AskResponse, AskRequest } from \"../../api\";\nimport { Answer, AnswerError } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton/SettingsButton\";\n\nexport function Component(): JSX.Element {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [approach, setApproach] = useState<Approaches>(Approaches.RetrieveThenRead);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [promptTemplatePrefix, setPromptTemplatePrefix] = useState<string>(\"\");\n    const [promptTemplateSuffix, setPromptTemplateSuffix] = useState<string>(\"\");\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n\n    const lastQuestionRef = useRef<string>(\"\");\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n    const [answer, setAnswer] = useState<AskResponse>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        try {\n            const request: AskRequest = {\n                question,\n                approach,\n                overrides: {\n                    promptTemplate: promptTemplate.length === 0 ? undefined : promptTemplate,\n                    promptTemplatePrefix: promptTemplatePrefix.length === 0 ? undefined : promptTemplatePrefix,\n                    promptTemplateSuffix: promptTemplateSuffix.length === 0 ? undefined : promptTemplateSuffix,\n                    excludeCategory: excludeCategory.length === 0 ? undefined : excludeCategory,\n                    top: retrieveCount,\n                    semanticRanker: useSemanticRanker,\n                    semanticCaptions: useSemanticCaptions\n                }\n            };\n            const result = await askApi(request);\n            setAnswer(result);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onPromptTemplatePrefixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplatePrefix(newValue || \"\");\n    };\n\n    const onPromptTemplateSuffixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplateSuffix(newValue || \"\");\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onApproachChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => {\n        setApproach((option?.key as Approaches) || Approaches.RetrieveThenRead);\n    };\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticRanker(!!checked);\n    };\n\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticCaptions(!!checked);\n    };\n\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\n        setExcludeCategory(newValue || \"\");\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs) => {\n        if (activeAnalysisPanelTab === tab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n    };\n\n    const approaches: IChoiceGroupOption[] = [\n        {\n            key: Approaches.RetrieveThenRead,\n            text: \"Retrieve-Then-Read\"\n        },\n        {\n            key: Approaches.ReadRetrieveRead,\n            text: \"Read-Retrieve-Read\"\n        },\n        {\n            key: Approaches.ReadDecomposeAsk,\n            text: \"Read-Decompose-Ask\"\n        }\n    ];\n\n    return (\n        <div className={styles.oneshotContainer}>\n            <div className={styles.oneshotTopSection}>\n                <SettingsButton className={styles.settingsButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n                <h1 className={styles.oneshotTitle}>Fa√ßa uma pergunta aos seus dados</h1>\n                <div className={styles.oneshotQuestionInput}>\n                    <QuestionInput placeholder=\"\" disabled={isLoading} onSend={question => makeApiRequest(question)} />\n                </div>\n            </div>\n            <div className={styles.oneshotBottomSection}>\n                {isLoading && <Spinner label=\"Gerando resposta\" />}\n                {!lastQuestionRef.current && <ExampleList onExampleClicked={onExampleClicked} />}\n                {!isLoading && answer && !error && (\n                    <div className={styles.oneshotAnswerContainer}>\n                        <Answer answer={answer} onQueryClicked={() => onToggleTab(AnalysisPanelTabs.QueryTab)} />\n                    </div>\n                )}\n                {error ? (\n                    <div className={styles.oneshotAnswerContainer}>\n                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                    </div>\n                ) : null}\n                {activeAnalysisPanelTab && answer && (\n                    <AnalysisPanel\n                        className={styles.oneshotAnalysisPanel}\n                        onActiveTabChanged={x => onToggleTab(x)}\n                        answer={answer}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n            </div>\n\n            <Panel\n                headerText=\"Configure answer generation\"\n                isOpen={isConfigPanelOpen}\n                isBlocking={false}\n                onDismiss={() => setIsConfigPanelOpen(false)}\n                closeButtonAriaLabel=\"Close\"\n                onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                isFooterAtBottom={true}\n            >\n                <ChoiceGroup\n                    className={styles.oneshotSettingsSeparator}\n                    label=\"Approach\"\n                    options={approaches}\n                    defaultSelectedKey={approach}\n                    onChange={onApproachChange}\n                />\n\n                {(approach === Approaches.RetrieveThenRead || approach === Approaches.ReadDecomposeAsk) && (\n                    <TextField\n                        className={styles.oneshotSettingsSeparator}\n                        defaultValue={promptTemplate}\n                        label=\"Override prompt template\"\n                        multiline\n                        autoAdjustHeight\n                        onChange={onPromptTemplateChange}\n                    />\n                )}\n\n                {approach === Approaches.ReadRetrieveRead && (\n                    <>\n                        <TextField\n                            className={styles.oneshotSettingsSeparator}\n                            defaultValue={promptTemplatePrefix}\n                            label=\"Override prompt prefix template\"\n                            multiline\n                            autoAdjustHeight\n                            onChange={onPromptTemplatePrefixChange}\n                        />\n                        <TextField\n                            className={styles.oneshotSettingsSeparator}\n                            defaultValue={promptTemplateSuffix}\n                            label=\"Override prompt suffix template\"\n                            multiline\n                            autoAdjustHeight\n                            onChange={onPromptTemplateSuffixChange}\n                        />\n                    </>\n                )}\n\n                <SpinButton\n                    className={styles.oneshotSettingsSeparator}\n                    label=\"Retrieve this many documents from search:\"\n                    min={1}\n                    max={50}\n                    defaultValue={retrieveCount.toString()}\n                    onChange={onRetrieveCountChange}\n                />\n                <TextField className={styles.oneshotSettingsSeparator} label=\"Exclude category\" onChange={onExcludeCategoryChanged} />\n                <Checkbox\n                    className={styles.oneshotSettingsSeparator}\n                    checked={useSemanticRanker}\n                    label=\"Use semantic ranker for retrieval\"\n                    onChange={onUseSemanticRankerChange}\n                />\n                <Checkbox\n                    className={styles.oneshotSettingsSeparator}\n                    checked={useSemanticCaptions}\n                    label=\"Use query-contextual summaries instead of whole documents\"\n                    onChange={onUseSemanticCaptionsChange}\n                    disabled={!useSemanticRanker}\n                />\n            </Panel>\n        </div>\n    );\n}\n\nComponent.displayName = \"OneShot\";\n"],"names":["Example","text","value","onClick","styles","EXAMPLES","ExampleList","onExampleClicked","jsx","x","i","Component","isConfigPanelOpen","setIsConfigPanelOpen","useState","approach","setApproach","Approaches","promptTemplate","setPromptTemplate","promptTemplatePrefix","setPromptTemplatePrefix","promptTemplateSuffix","setPromptTemplateSuffix","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","lastQuestionRef","useRef","isLoading","setIsLoading","error","setError","answer","setAnswer","activeCitation","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","makeApiRequest","question","request","result","askApi","e","onPromptTemplateChange","_ev","newValue","onPromptTemplatePrefixChange","onPromptTemplateSuffixChange","onRetrieveCountChange","onApproachChange","option","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onExcludeCategoryChanged","example","onToggleTab","tab","approaches","jsxs","SettingsButton","QuestionInput","Spinner","Answer","AnalysisPanelTabs","AnswerError","AnalysisPanel","Panel","DefaultButton","ChoiceGroup","TextField","Fragment","SpinButton","Checkbox"],"mappings":"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"}